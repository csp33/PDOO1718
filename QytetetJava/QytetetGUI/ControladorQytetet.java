//     ___            _            _            _   
//    / _ \   _   _  | |_    ___  | |_    ___  | |_ 
//   | | | | | | | | | __|  / _ \ | __|  / _ \ | __|
//   | |_| | | |_| | | |_  |  __/ | |_  |  __/ | |_ 
//    \__\_\  \__, |  \__|  \___|  \__|  \___|  \__|
//            |___/                                 
package QytetetGUI;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import modeloqytetet.Calle;
import modeloqytetet.Especulador;
import modeloqytetet.MetodoSalirCarcel;
import modeloqytetet.Qytetet;
import modeloqytetet.TipoCasilla;
import modeloqytetet.TipoSorpresa;
import modeloqytetet.TituloPropiedad;

/**
 *
 * @author csp98
 */
public class ControladorQytetet extends javax.swing.JFrame {

    /**
     * Creates new form ControladorQytetet
     */
    public ControladorQytetet() {
        initComponents();
        Elegir.removeAllItems();
        Elegir.addItem("El jugador no tiene propiedades...");
        this.setTitle("Qytetet");
    }
    private Qytetet modeloQytetet;

    public void actualizar(Qytetet juego) {
        vistaQytetet.actualizar(juego);
        modeloQytetet = juego;
    }

    public void actualizarVista() {
        vistaQytetet.actualizar(modeloQytetet);
    }

    private void configurarDesplegableElegir() {
        Elegir.removeAllItems();
        if (modeloQytetet.getJugadorActual().tengoPropiedades()) {
            for (TituloPropiedad p : modeloQytetet.getJugadorActual().getPropiedades()) {
                Elegir.addItem(p.getNombre());
            }
        } else {
            Elegir.addItem("El jugador no tiene propiedades...");
        }
    }

    private void activarGestion() {
        boolean bancarrota = modeloQytetet.getJugadorActual().getSaldo() <= 0;
        if (modeloQytetet.getJugadorActual().tengoPropiedades() && !bancarrota && !modeloQytetet.getJugadorActual().getEncarcelado()) {
            Calle elegida = buscar((String) Elegir.getSelectedItem());
            if (elegida != null) {      //Por si no hay ninguna propiedad seleccionada
                //Vender
                if (modeloQytetet.getJugadorActual().puedoVenderPropiedad(elegida)) {
                    this.VenderPropiedad.setEnabled(true);
                } else {
                    this.VenderPropiedad.setEnabled(false);
                }
                //Casa o hotel
                if (elegida.sePuedeEdificarCasa(modeloQytetet.getJugadorActual().getFactorEspeculador())) {
                    this.ConstruirCasa.setEnabled(true);
                    this.ConstruirHotel.setEnabled(false);
                } else if (elegida.sePuedeEdificarHotel(modeloQytetet.getJugadorActual().getFactorEspeculador())) {
                    this.ConstruirCasa.setEnabled(false);
                    this.ConstruirHotel.setEnabled(true);
                } else {
                    this.ConstruirCasa.setEnabled(false);
                    this.ConstruirHotel.setEnabled(false);
                }
                //Hipotecar o cancelar
                if (elegida.getTituloPropiedad().getHipotecada()) {
                    this.CancelarHipoteca.setEnabled(true);
                    this.HipotecarPropiedad.setEnabled(false);
                    this.ConstruirCasa.setEnabled(false);
                    this.ConstruirHotel.setEnabled(false);
                } else {
                    this.CancelarHipoteca.setEnabled(false);
                    this.HipotecarPropiedad.setEnabled(true);
                }
            }
        } else {
            desactivarGestion();
        }
    }

    private void desactivarGestion() {
        this.CancelarHipoteca.setEnabled(false);
        this.VenderPropiedad.setEnabled(false);
        this.HipotecarPropiedad.setEnabled(false);
        this.ConstruirHotel.setEnabled(false);
        this.ConstruirCasa.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Jugar = new javax.swing.JButton();
        CarcelDado = new javax.swing.JButton();
        CarcelPagar = new javax.swing.JButton();
        Comprar = new javax.swing.JButton();
        AplicarSorpresa = new javax.swing.JButton();
        SiguienteJugador = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        ConstruirCasa = new javax.swing.JButton();
        ConstruirHotel = new javax.swing.JButton();
        VenderPropiedad = new javax.swing.JButton();
        HipotecarPropiedad = new javax.swing.JButton();
        CancelarHipoteca = new javax.swing.JButton();
        Elegir = new javax.swing.JComboBox<>();
        vistaQytetet = new QytetetGUI.VistaQytetet();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(155, 159, 172));

        Jugar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/QytetetGUI/jugar.png"))); // NOI18N
        Jugar.setText("Jugar");
        Jugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JugarActionPerformed(evt);
            }
        });

        CarcelDado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/QytetetGUI/dado.png"))); // NOI18N
        CarcelDado.setText("Salir tirando dado");
        CarcelDado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CarcelDadoActionPerformed(evt);
            }
        });

        CarcelPagar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/QytetetGUI/pagar.png"))); // NOI18N
        CarcelPagar.setText("Salir pagando libertad");
        CarcelPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CarcelPagarActionPerformed(evt);
            }
        });

        Comprar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/QytetetGUI/comprar.png"))); // NOI18N
        Comprar.setText("Comprar Propiedad");
        Comprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComprarActionPerformed(evt);
            }
        });

        AplicarSorpresa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/QytetetGUI/sorpresa.png"))); // NOI18N
        AplicarSorpresa.setText("Aplicar Sorpresa");
        AplicarSorpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AplicarSorpresaActionPerformed(evt);
            }
        });

        SiguienteJugador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/QytetetGUI/siguiente.png"))); // NOI18N
        SiguienteJugador.setText("Siguiente Jugador");
        SiguienteJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiguienteJugadorActionPerformed(evt);
            }
        });

        jSeparator1.setBackground(new java.awt.Color(254, 254, 254));
        jSeparator1.setBorder(null);

        ConstruirCasa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/QytetetGUI/casa.png"))); // NOI18N
        ConstruirCasa.setText("Construir Casa");
        ConstruirCasa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConstruirCasaActionPerformed(evt);
            }
        });

        ConstruirHotel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/QytetetGUI/hotel.png"))); // NOI18N
        ConstruirHotel.setText("Construir Hotel");
        ConstruirHotel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConstruirHotelActionPerformed(evt);
            }
        });

        VenderPropiedad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/QytetetGUI/vender.png"))); // NOI18N
        VenderPropiedad.setText("Vender Propiedad");
        VenderPropiedad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VenderPropiedadActionPerformed(evt);
            }
        });

        HipotecarPropiedad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/QytetetGUI/hipotecar.png"))); // NOI18N
        HipotecarPropiedad.setText("Hipotecar Propiedad");
        HipotecarPropiedad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HipotecarPropiedadActionPerformed(evt);
            }
        });

        CancelarHipoteca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/QytetetGUI/cancelarHipoteca.png"))); // NOI18N
        CancelarHipoteca.setText("Cancelar Hipoteca");
        CancelarHipoteca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarHipotecaActionPerformed(evt);
            }
        });

        Elegir.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Elegir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ElegirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSeparator1)
                                .addGap(34, 34, 34))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(VenderPropiedad, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                                    .addComponent(ConstruirHotel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ConstruirCasa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(HipotecarPropiedad, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                                    .addComponent(CancelarHipoteca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Elegir, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(46, 46, 46))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Comprar, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                            .addComponent(AplicarSorpresa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Jugar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SiguienteJugador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CarcelDado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CarcelPagar, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))
                        .addGap(40, 40, 40)))
                .addComponent(vistaQytetet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vistaQytetet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CarcelPagar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CarcelDado, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Jugar, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(SiguienteJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AplicarSorpresa)
                                .addGap(87, 87, 87)
                                .addComponent(Comprar)))
                        .addGap(47, 47, 47)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ConstruirCasa)
                            .addComponent(HipotecarPropiedad))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ConstruirHotel)
                            .addComponent(Elegir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(VenderPropiedad)
                            .addComponent(CancelarHipoteca, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        ConstruirCasa.getAccessibleContext().setAccessibleName("Construir casa");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CarcelPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CarcelPagarActionPerformed
        // TODO add your handling code here:
        boolean resultado = modeloQytetet.intentarSalirCarcel(MetodoSalirCarcel.PAGANDOLIBERTAD);
        this.CarcelPagar.setEnabled(false);
        this.CarcelDado.setEnabled(false);
        if (resultado) {
            JOptionPane.showMessageDialog(this, "Sales de la cárcel.");
            this.Jugar.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "No tienes saldo suficiente.");
            this.SiguienteJugador.setEnabled(true);
        }
        configurarDesplegableElegir();
        desactivarGestion();
        this.vistaQytetet.actualizar(modeloQytetet);
    }//GEN-LAST:event_CarcelPagarActionPerformed

    private void AplicarSorpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AplicarSorpresaActionPerformed
        // TODO add your handling code here:
        boolean tienePropietario;
        String msg;
        tienePropietario = modeloQytetet.aplicarSorpresa();
        if (modeloQytetet.getCartaActual().getTipo() == TipoSorpresa.IRACASILLA) {
            if (modeloQytetet.getCartaActual().getValor() == 10) {
                msg = "La carta manda al jugador a la cárcel.";
            } else {
                msg = "La carta manda al jugador a la casilla " + modeloQytetet.getCartaActual().getValor() + ".";
            }
            JOptionPane.showMessageDialog(this, msg);
            if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.CALLE) {
                if (tienePropietario) {
                    msg = "El propietario de la casilla es "
                            + ((Calle) modeloQytetet.getJugadorActual().getCasillaActual()).getTituloPropiedad().getPropietario().getNombre() + ". Por lo"
                            + "tanto, has de pagarle el alquiler.";
                    this.AplicarSorpresa.setEnabled(false);
                    this.CarcelDado.setEnabled(false);
                    this.CarcelPagar.setEnabled(false);
                    this.Comprar.setEnabled(false);
                    this.Jugar.setEnabled(false);
                    this.SiguienteJugador.setEnabled(true);
                } else {
                    msg = "La casilla no tiene propietario. Pulsa Comprar o Pasar Turno.";
                    this.AplicarSorpresa.setEnabled(false);
                    this.CarcelDado.setEnabled(false);
                    this.CarcelPagar.setEnabled(false);
                    this.Comprar.setEnabled(true);
                    this.Jugar.setEnabled(false);
                    this.SiguienteJugador.setEnabled(true);
                }
                JOptionPane.showMessageDialog(this, msg);
            }
        }
        this.AplicarSorpresa.setEnabled(false);
        this.SiguienteJugador.setEnabled(true);
        configurarDesplegableElegir();
        this.vistaQytetet.actualizar(modeloQytetet);
    }//GEN-LAST:event_AplicarSorpresaActionPerformed

    private void JugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JugarActionPerformed
        // TODO add your handling code here:
        desactivarGestion();
        if (modeloQytetet.getJugadorActual().getEncarcelado()) { //Intenta salir de la cárcel.
            JOptionPane.showMessageDialog(this, "Estás en la cárcel. Elige uno de los métodos para intentar salir.");
            modificarBotones(false, true, true, false, false, false);
        }
        boolean tienePropietario;
        String msg;
        if (!modeloQytetet.getJugadorActual().getEncarcelado()) { //Si salió de la cárcel
            int anterior = modeloQytetet.getJugadorActual().getCasillaActual().getNumeroCasilla();
            tienePropietario = modeloQytetet.jugar();
            int nueva = modeloQytetet.getJugadorActual().getCasillaActual().getNumeroCasilla();
            if (nueva < anterior && modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.SALIDA) { //Pasa por salida, sin quedarse en ella 
                JOptionPane.showMessageDialog(this, "El jugador pasa por salida, por lo que cobra " + modeloQytetet.getSaldoSalida() + "€.");
            }
            if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.CALLE) {
                if (tienePropietario) {
                    String prop = ((Calle) modeloQytetet.getJugadorActual().getCasillaActual()).getTituloPropiedad().getPropietario().getNombre();
                    int coste = ((Calle) (modeloQytetet.getJugadorActual().getCasillaActual())).cobrarAlquiler();
                    msg = "El propietario de la calle es " + prop + ".Por tanto, has de pagare el alquiler ( " + coste + " €).";
                    modificarBotones(false, false, false, false, false, true);
                    JOptionPane.showMessageDialog(this, msg);
                } else {
                    String real = "";
                    if (modeloQytetet.getJugadorActual().tengoPropiedades()) {
                        real = ", realizar tus gestiones ";
                    }
                    msg = "La casilla no tiene propietario. Puedes comprarla " + real + "o pasar el turno.";
                    modificarBotones(false, false, false, true, false, true);
                    JOptionPane.showMessageDialog(this, msg);
                }
            } else if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.SORPRESA) {
                modificarBotones(true, false, false, false, false, false);
                msg = "El jugador cae en una casilla sorpresa y saca una carta del mazo.";
                JOptionPane.showMessageDialog(this, msg);
            } else {
                modificarBotones(false, false, false, false, false, true);
                if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.IMPUESTO) {
                    int coste = modeloQytetet.getJugadorActual().getCasillaActual().getCoste();
                    msg = "El jugador paga un impuesto de " + coste + " euros.";
                    JOptionPane.showMessageDialog(this, msg);
                } else if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.PARKING) {
                    msg = "El jugador llega al parking.";
                    JOptionPane.showMessageDialog(this, msg);
                } else if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.CARCEL) { //Cárcel
                    if (modeloQytetet.getJugadorActual().getEncarcelado()) {
                        msg = "El juez manda al jugador a la cárcel.";
                        JOptionPane.showMessageDialog(this, msg);
                    }
                } else if (modeloQytetet.getJugadorActual().getCasillaActual().getTipoCasilla() == TipoCasilla.SALIDA) {
                    msg = "El jugador cae en la salida, por lo que cobra " + modeloQytetet.getSaldoSalida() + "€.";
                    JOptionPane.showMessageDialog(this, msg);
                } else {       //Especulador
                    int fianza = ((Especulador) (modeloQytetet.getJugadorActual())).getFianza();
                    msg = "El juez intenta mandar al jugador a la cárcel, pero éste lo evita pagando una fianza de " + fianza + "€.";
                    JOptionPane.showMessageDialog(this, msg);
                }
            }
        }
        //Fin del juego
        boolean bancarrota = modeloQytetet.getJugadorActual().getSaldo() <= 0;
        if (bancarrota) {
            JOptionPane.showMessageDialog(this, "El jugador cae en bancarrota. Fin del juego.");
            String texto = "Ranking:\n" + modeloQytetet.obtenerRanking().toString();
            modificarBotones(false, false, false, false, false, false);
            JOptionPane.showMessageDialog(this, texto);
        }
        configurarDesplegableElegir();
        this.vistaQytetet.actualizar(modeloQytetet);

    }//GEN-LAST:event_JugarActionPerformed

    private void CarcelDadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CarcelDadoActionPerformed
        // TODO add your handling code here:
        boolean resultado = modeloQytetet.intentarSalirCarcel(MetodoSalirCarcel.TIRANDODADO);
        this.CarcelPagar.setEnabled(false);
        this.CarcelDado.setEnabled(false);
        if (resultado) {
            JOptionPane.showMessageDialog(this, "Sales de la cárcel.");
            this.Jugar.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "Mala suerte! Sigues en la cárcel.");
            this.SiguienteJugador.setEnabled(true);
        }
        configurarDesplegableElegir();
        desactivarGestion();
        this.vistaQytetet.actualizar(modeloQytetet);
    }//GEN-LAST:event_CarcelDadoActionPerformed

    private void ComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComprarActionPerformed
        // TODO add your handling code here:
        boolean puedo;
        String msg;
        puedo = modeloQytetet.comprarTituloPropiedad();
        if (puedo) {
            msg = "Enhorabuena! Propiedad comprada!";
        } else {
            msg = "El jugador no tiene suficiente saldo.";
        }
        JOptionPane.showMessageDialog(this, msg);
        modificarBotones(false, false, false, false, false, true);
        configurarDesplegableElegir();
        this.vistaQytetet.actualizar(modeloQytetet);
    }//GEN-LAST:event_ComprarActionPerformed
    private void modificarBotones(boolean sorp, boolean dado, boolean pagar, boolean comprar, boolean jugar, boolean next) {
        this.AplicarSorpresa.setEnabled(sorp);
        this.CarcelDado.setEnabled(dado);
        this.CarcelPagar.setEnabled(pagar);
        this.Comprar.setEnabled(comprar);
        this.Jugar.setEnabled(jugar);
        this.SiguienteJugador.setEnabled(next);
    }
    private void SiguienteJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiguienteJugadorActionPerformed
        // TODO add your handling code here:
        modificarBotones(false, false, false, false, true, false);
        modeloQytetet.siguienteJugador();
        configurarDesplegableElegir();
        desactivarGestion();
        this.vistaQytetet.actualizar(modeloQytetet);
    }//GEN-LAST:event_SiguienteJugadorActionPerformed

    private Calle buscar(String nombre) {   //Nos da un objeto calle a partir de su nombre seleccionado en el JComboBox
        Calle devolver = null;
        boolean seguir = true;
        for (int i = 0; i < modeloQytetet.getTablero().getTamanio() && seguir; i++) {
            if (modeloQytetet.getTablero().obtenerCasillaNumero(i) instanceof Calle) {
                if (((Calle) modeloQytetet.getTablero().obtenerCasillaNumero(i)).getTituloPropiedad().getNombre() == nombre) {
                    seguir = false;
                    devolver = (Calle) modeloQytetet.getTablero().obtenerCasillaNumero(i);
                }
            }
        }
        return devolver;
    }
    private void ElegirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ElegirActionPerformed
        if (modeloQytetet != null && !Jugar.isEnabled()) {
            activarGestion();
        }
    }//GEN-LAST:event_ElegirActionPerformed

    private void ConstruirHotelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConstruirHotelActionPerformed
        Calle elegida = buscar((String) Elegir.getSelectedItem());
        String msg;
        if (modeloQytetet.edificarHotel(elegida)) {
            msg = "Hotel construido.";
        } else {
            msg = "No tiene suficiente saldo.";
        }
        this.vistaQytetet.actualizar(modeloQytetet);
        activarGestion();
        JOptionPane.showMessageDialog(this, msg);
    }//GEN-LAST:event_ConstruirHotelActionPerformed

    private void VenderPropiedadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VenderPropiedadActionPerformed
        Calle elegida = buscar((String) Elegir.getSelectedItem());
        modeloQytetet.venderPropiedad(elegida);
        JOptionPane.showMessageDialog(this, "Propiedad vendida.");
        this.vistaQytetet.actualizar(modeloQytetet);
        activarGestion();
        configurarDesplegableElegir();
    }//GEN-LAST:event_VenderPropiedadActionPerformed

    private void HipotecarPropiedadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HipotecarPropiedadActionPerformed
        // TODO add your handling code here:
        Calle elegida = buscar((String) Elegir.getSelectedItem());
        modeloQytetet.hipotecarPropiedad(elegida);
        this.vistaQytetet.actualizar(modeloQytetet);
        activarGestion();
        JOptionPane.showMessageDialog(this, "Propiedad hipotecada.");
    }//GEN-LAST:event_HipotecarPropiedadActionPerformed

    private void CancelarHipotecaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarHipotecaActionPerformed
        Calle elegida = buscar((String) Elegir.getSelectedItem());
        String msg;
        if (modeloQytetet.cancelarHipoteca(elegida)) {
            msg = "Hipoteca cancelada";
        } else {
            msg = "No tienes suficiente saldo";
        }
        this.vistaQytetet.actualizar(modeloQytetet);
        activarGestion();
        JOptionPane.showMessageDialog(this, msg);
    }//GEN-LAST:event_CancelarHipotecaActionPerformed

    private void ConstruirCasaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConstruirCasaActionPerformed
        Calle elegida = buscar((String) Elegir.getSelectedItem());
        String msg;
        if (modeloQytetet.edificarCasa(elegida)) {
            msg = "Casa construida.";
        } else {
            msg = "No tiene suficiente saldo.";
        }
        this.vistaQytetet.actualizar(modeloQytetet);
        activarGestion();
        JOptionPane.showMessageDialog(this, msg);
    }//GEN-LAST:event_ConstruirCasaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        ControladorQytetet controlador = new ControladorQytetet();
        CapturaNombreJugadores capturaNombres = new CapturaNombreJugadores(controlador, true);
        ArrayList<String> nombres = capturaNombres.obtenerNombres();
        Qytetet juego = Qytetet.getInstance(nombres);
        Dado.createInstance(controlador);
        controlador.actualizar(juego);
        controlador.actualizarVista();
        controlador.modificarBotones(false, false, false, false, true, false);
        controlador.desactivarGestion();
        controlador.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AplicarSorpresa;
    private javax.swing.JButton CancelarHipoteca;
    private javax.swing.JButton CarcelDado;
    private javax.swing.JButton CarcelPagar;
    private javax.swing.JButton Comprar;
    private javax.swing.JButton ConstruirCasa;
    private javax.swing.JButton ConstruirHotel;
    private javax.swing.JComboBox<String> Elegir;
    private javax.swing.JButton HipotecarPropiedad;
    private javax.swing.JButton Jugar;
    private javax.swing.JButton SiguienteJugador;
    private javax.swing.JButton VenderPropiedad;
    private javax.swing.JSeparator jSeparator1;
    private QytetetGUI.VistaQytetet vistaQytetet;
    // End of variables declaration//GEN-END:variables
}
